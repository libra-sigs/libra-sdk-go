// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types/transaction.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactionArgument_ArgType int32

const (
	TransactionArgument_U64       TransactionArgument_ArgType = 0
	TransactionArgument_ADDRESS   TransactionArgument_ArgType = 1
	TransactionArgument_STRING    TransactionArgument_ArgType = 2
	TransactionArgument_BYTEARRAY TransactionArgument_ArgType = 3
)

var TransactionArgument_ArgType_name = map[int32]string{
	0: "U64",
	1: "ADDRESS",
	2: "STRING",
	3: "BYTEARRAY",
}

var TransactionArgument_ArgType_value = map[string]int32{
	"U64":       0,
	"ADDRESS":   1,
	"STRING":    2,
	"BYTEARRAY": 3,
}

func (x TransactionArgument_ArgType) String() string {
	return proto.EnumName(TransactionArgument_ArgType_name, int32(x))
}

func (TransactionArgument_ArgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{0, 0}
}

// An argument to the transaction if the transaction takes arguments
type TransactionArgument struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionArgument) Reset()         { *m = TransactionArgument{} }
func (m *TransactionArgument) String() string { return proto.CompactTextString(m) }
func (*TransactionArgument) ProtoMessage()    {}
func (*TransactionArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{0}
}

func (m *TransactionArgument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionArgument.Unmarshal(m, b)
}
func (m *TransactionArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionArgument.Marshal(b, m, deterministic)
}
func (m *TransactionArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionArgument.Merge(m, src)
}
func (m *TransactionArgument) XXX_Size() int {
	return xxx_messageInfo_TransactionArgument.Size(m)
}
func (m *TransactionArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionArgument.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionArgument proto.InternalMessageInfo

// A generic structure that represents signed RawTransaction
type SignedTransaction struct {
	// LCS bytes representation of a SignedTransaction.
	TxnBytes             []byte   `protobuf:"bytes,5,opt,name=txn_bytes,json=txnBytes,proto3" json:"txn_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedTransaction) Reset()         { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()    {}
func (*SignedTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{1}
}

func (m *SignedTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedTransaction.Unmarshal(m, b)
}
func (m *SignedTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedTransaction.Marshal(b, m, deterministic)
}
func (m *SignedTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTransaction.Merge(m, src)
}
func (m *SignedTransaction) XXX_Size() int {
	return xxx_messageInfo_SignedTransaction.Size(m)
}
func (m *SignedTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTransaction proto.InternalMessageInfo

func (m *SignedTransaction) GetTxnBytes() []byte {
	if m != nil {
		return m.TxnBytes
	}
	return nil
}

// A generic structure that represents a transaction, covering all possible
// variants.
type Transaction struct {
	Transaction          []byte   `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{2}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type TransactionWithProof struct {
	// The version of the returned signed transaction.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The transaction itself.
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// The proof authenticating the transaction.
	Proof *TransactionProof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	// The events yielded by executing the transaction, if requested.
	Events               *EventsList `protobuf:"bytes,4,opt,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TransactionWithProof) Reset()         { *m = TransactionWithProof{} }
func (m *TransactionWithProof) String() string { return proto.CompactTextString(m) }
func (*TransactionWithProof) ProtoMessage()    {}
func (*TransactionWithProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{3}
}

func (m *TransactionWithProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionWithProof.Unmarshal(m, b)
}
func (m *TransactionWithProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionWithProof.Marshal(b, m, deterministic)
}
func (m *TransactionWithProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionWithProof.Merge(m, src)
}
func (m *TransactionWithProof) XXX_Size() int {
	return xxx_messageInfo_TransactionWithProof.Size(m)
}
func (m *TransactionWithProof) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionWithProof.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionWithProof proto.InternalMessageInfo

func (m *TransactionWithProof) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TransactionWithProof) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionWithProof) GetProof() *TransactionProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *TransactionWithProof) GetEvents() *EventsList {
	if m != nil {
		return m.Events
	}
	return nil
}

// A generic structure that represents a block of transactions originated from a
// particular validator instance.
type SignedTransactionsBlock struct {
	// Set of Signed Transactions
	Transactions []*SignedTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// Public key of the validator that created this block
	ValidatorPublicKey []byte `protobuf:"bytes,2,opt,name=validator_public_key,json=validatorPublicKey,proto3" json:"validator_public_key,omitempty"`
	// Signature of the validator that created this block
	ValidatorSignature   []byte   `protobuf:"bytes,3,opt,name=validator_signature,json=validatorSignature,proto3" json:"validator_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedTransactionsBlock) Reset()         { *m = SignedTransactionsBlock{} }
func (m *SignedTransactionsBlock) String() string { return proto.CompactTextString(m) }
func (*SignedTransactionsBlock) ProtoMessage()    {}
func (*SignedTransactionsBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{4}
}

func (m *SignedTransactionsBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedTransactionsBlock.Unmarshal(m, b)
}
func (m *SignedTransactionsBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedTransactionsBlock.Marshal(b, m, deterministic)
}
func (m *SignedTransactionsBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTransactionsBlock.Merge(m, src)
}
func (m *SignedTransactionsBlock) XXX_Size() int {
	return xxx_messageInfo_SignedTransactionsBlock.Size(m)
}
func (m *SignedTransactionsBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTransactionsBlock.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTransactionsBlock proto.InternalMessageInfo

func (m *SignedTransactionsBlock) GetTransactions() []*SignedTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *SignedTransactionsBlock) GetValidatorPublicKey() []byte {
	if m != nil {
		return m.ValidatorPublicKey
	}
	return nil
}

func (m *SignedTransactionsBlock) GetValidatorSignature() []byte {
	if m != nil {
		return m.ValidatorSignature
	}
	return nil
}

// Account state as a whole.
// After execution, updates to accounts are passed in this form to storage for
// persistence.
type AccountState struct {
	// Account address
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Account state blob
	Blob                 []byte   `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountState) Reset()         { *m = AccountState{} }
func (m *AccountState) String() string { return proto.CompactTextString(m) }
func (*AccountState) ProtoMessage()    {}
func (*AccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{5}
}

func (m *AccountState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountState.Unmarshal(m, b)
}
func (m *AccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountState.Marshal(b, m, deterministic)
}
func (m *AccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountState.Merge(m, src)
}
func (m *AccountState) XXX_Size() int {
	return xxx_messageInfo_AccountState.Size(m)
}
func (m *AccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountState.DiscardUnknown(m)
}

var xxx_messageInfo_AccountState proto.InternalMessageInfo

func (m *AccountState) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AccountState) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

// Transaction struct to commit to storage
type TransactionToCommit struct {
	// The signed transaction which was executed
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// State db updates
	AccountStates []*AccountState `protobuf:"bytes,2,rep,name=account_states,json=accountStates,proto3" json:"account_states,omitempty"`
	// Events yielded by the transaction.
	Events []*Event `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	// The amount of gas used.
	GasUsed uint64 `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// The major status of executing the transaction.
	MajorStatus          uint64   `protobuf:"varint,5,opt,name=major_status,json=majorStatus,proto3" json:"major_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionToCommit) Reset()         { *m = TransactionToCommit{} }
func (m *TransactionToCommit) String() string { return proto.CompactTextString(m) }
func (*TransactionToCommit) ProtoMessage()    {}
func (*TransactionToCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{6}
}

func (m *TransactionToCommit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionToCommit.Unmarshal(m, b)
}
func (m *TransactionToCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionToCommit.Marshal(b, m, deterministic)
}
func (m *TransactionToCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionToCommit.Merge(m, src)
}
func (m *TransactionToCommit) XXX_Size() int {
	return xxx_messageInfo_TransactionToCommit.Size(m)
}
func (m *TransactionToCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionToCommit.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionToCommit proto.InternalMessageInfo

func (m *TransactionToCommit) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionToCommit) GetAccountStates() []*AccountState {
	if m != nil {
		return m.AccountStates
	}
	return nil
}

func (m *TransactionToCommit) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *TransactionToCommit) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *TransactionToCommit) GetMajorStatus() uint64 {
	if m != nil {
		return m.MajorStatus
	}
	return 0
}

// A list of consecutive transactions with proof. This is mainly used for state
// synchronization when a validator would request a list of transactions from a
// peer, verify the proof, execute the transactions and persist them. Note that
// the transactions are supposed to belong to the same epoch E, otherwise
// verification will fail.
type TransactionListWithProof struct {
	// The list of transactions.
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// The list of corresponding Event objects (only present if fetch_events was
	// set to true in req)
	EventsForVersions *EventsForVersions `protobuf:"bytes,2,opt,name=events_for_versions,json=eventsForVersions,proto3" json:"events_for_versions,omitempty"`
	// If the list is not empty, the version of the first transaction.
	FirstTransactionVersion *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=first_transaction_version,json=firstTransactionVersion,proto3" json:"first_transaction_version,omitempty"`
	// The proof authenticating the transactions and events.When this is used
	// for state synchronization, the validator who requests the transactions
	// will provide a version in the request and the proofs will be relative to
	// the given version. When this is returned in GetTransactionsResponse, the
	// proofs will be relative to the ledger info returned in
	// UpdateToLatestLedgerResponse.
	Proof                *TransactionListProof `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TransactionListWithProof) Reset()         { *m = TransactionListWithProof{} }
func (m *TransactionListWithProof) String() string { return proto.CompactTextString(m) }
func (*TransactionListWithProof) ProtoMessage()    {}
func (*TransactionListWithProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_f290fc1033170716, []int{7}
}

func (m *TransactionListWithProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionListWithProof.Unmarshal(m, b)
}
func (m *TransactionListWithProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionListWithProof.Marshal(b, m, deterministic)
}
func (m *TransactionListWithProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionListWithProof.Merge(m, src)
}
func (m *TransactionListWithProof) XXX_Size() int {
	return xxx_messageInfo_TransactionListWithProof.Size(m)
}
func (m *TransactionListWithProof) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionListWithProof.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionListWithProof proto.InternalMessageInfo

func (m *TransactionListWithProof) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *TransactionListWithProof) GetEventsForVersions() *EventsForVersions {
	if m != nil {
		return m.EventsForVersions
	}
	return nil
}

func (m *TransactionListWithProof) GetFirstTransactionVersion() *wrappers.UInt64Value {
	if m != nil {
		return m.FirstTransactionVersion
	}
	return nil
}

func (m *TransactionListWithProof) GetProof() *TransactionListProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterEnum("types.TransactionArgument_ArgType", TransactionArgument_ArgType_name, TransactionArgument_ArgType_value)
	proto.RegisterType((*TransactionArgument)(nil), "types.TransactionArgument")
	proto.RegisterType((*SignedTransaction)(nil), "types.SignedTransaction")
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*TransactionWithProof)(nil), "types.TransactionWithProof")
	proto.RegisterType((*SignedTransactionsBlock)(nil), "types.SignedTransactionsBlock")
	proto.RegisterType((*AccountState)(nil), "types.AccountState")
	proto.RegisterType((*TransactionToCommit)(nil), "types.TransactionToCommit")
	proto.RegisterType((*TransactionListWithProof)(nil), "types.TransactionListWithProof")
}

func init() { proto.RegisterFile("types/transaction.proto", fileDescriptor_f290fc1033170716) }

var fileDescriptor_f290fc1033170716 = []byte{
	// 683 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x53, 0xdb, 0x3a,
	0x10, 0x7f, 0x4e, 0x02, 0x81, 0x4d, 0x78, 0x93, 0x28, 0xcc, 0xc4, 0xfc, 0x99, 0x37, 0x79, 0x9e,
	0x77, 0xe0, 0x1d, 0x88, 0x29, 0xcd, 0x70, 0x60, 0xb8, 0x24, 0x85, 0xb6, 0x4c, 0x3b, 0x1d, 0xaa,
	0x04, 0x5a, 0x7a, 0xf1, 0xc8, 0x8e, 0x62, 0x5c, 0x12, 0xcb, 0x23, 0xc9, 0x94, 0x7c, 0xa4, 0x7e,
	0x85, 0x9e, 0xfa, 0x7d, 0xfa, 0x25, 0x3a, 0x96, 0x65, 0x50, 0x08, 0x87, 0xde, 0xb4, 0xbb, 0xbf,
	0xdf, 0x6a, 0x77, 0x7f, 0x2b, 0x41, 0x5b, 0xce, 0x13, 0x2a, 0x5c, 0xc9, 0x49, 0x2c, 0x48, 0x20,
	0x23, 0x16, 0x77, 0x13, 0xce, 0x24, 0x43, 0x2b, 0x2a, 0xb0, 0xad, 0xe3, 0x24, 0x08, 0xa8, 0x10,
	0x5e, 0x42, 0xe4, 0x4d, 0x1e, 0xdf, 0x46, 0x79, 0x80, 0xde, 0xd1, 0x58, 0x0a, 0xed, 0x6b, 0xe6,
	0xbe, 0x84, 0x33, 0x36, 0xd1, 0xae, 0xdd, 0xa5, 0xfc, 0x5e, 0x14, 0x4f, 0x98, 0x8e, 0xfe, 0x13,
	0x32, 0x16, 0x4e, 0xa9, 0xab, 0x2c, 0x3f, 0x9d, 0xb8, 0xdf, 0x38, 0x49, 0x12, 0xca, 0x75, 0x42,
	0xe7, 0x23, 0xb4, 0x46, 0x8f, 0xcc, 0x3e, 0x0f, 0xd3, 0x19, 0x8d, 0xa5, 0x73, 0x0c, 0xd5, 0x3e,
	0x0f, 0x47, 0xf3, 0x84, 0xa2, 0x2a, 0x94, 0x2f, 0x8f, 0x7a, 0x8d, 0xbf, 0x50, 0x0d, 0xaa, 0xfd,
	0xd3, 0x53, 0x7c, 0x36, 0x1c, 0x36, 0x2c, 0x04, 0xb0, 0x3a, 0x1c, 0xe1, 0xf3, 0x0f, 0x6f, 0x1a,
	0x25, 0xb4, 0x01, 0xeb, 0x83, 0xeb, 0xd1, 0x59, 0x1f, 0xe3, 0xfe, 0x75, 0xa3, 0xec, 0x1c, 0x40,
	0x73, 0x18, 0x85, 0x31, 0x1d, 0x1b, 0x89, 0xd1, 0x0e, 0xac, 0xcb, 0xfb, 0xd8, 0xf3, 0xe7, 0x92,
	0x0a, 0x7b, 0xa5, 0x63, 0xed, 0xd5, 0xf1, 0x9a, 0xbc, 0x8f, 0x07, 0x99, 0xed, 0xb8, 0x50, 0x33,
	0xb1, 0x1d, 0xa8, 0x19, 0xdd, 0xd8, 0x96, 0x42, 0x9b, 0x2e, 0xe7, 0xa7, 0x05, 0x9b, 0x06, 0xe3,
	0x53, 0x24, 0x6f, 0x2e, 0xb2, 0x91, 0x20, 0x1b, 0xaa, 0x77, 0x94, 0x8b, 0x82, 0x56, 0xc1, 0x85,
	0x89, 0x7a, 0x8b, 0x49, 0x4b, 0x1d, 0x6b, 0xaf, 0x76, 0x88, 0xba, 0x6a, 0x78, 0x5d, 0x23, 0xd7,
	0xc2, 0x45, 0x68, 0x1f, 0x56, 0xd4, 0xac, 0xed, 0xb2, 0xc2, 0xb7, 0x97, 0xf1, 0xea, 0x5e, 0x9c,
	0xa3, 0xd0, 0xff, 0xb0, 0x9a, 0xcb, 0x65, 0x57, 0x14, 0xbe, 0xa9, 0xf1, 0x67, 0xca, 0xf9, 0x3e,
	0x12, 0x12, 0x6b, 0x80, 0xf3, 0xc3, 0x82, 0xf6, 0xd2, 0x98, 0xc4, 0x60, 0xca, 0x82, 0x5b, 0x74,
	0x02, 0x75, 0xa3, 0x08, 0x61, 0x5b, 0x9d, 0xf2, 0x5e, 0xed, 0xd0, 0xd6, 0xc9, 0x96, 0x58, 0x78,
	0x01, 0x8d, 0x0e, 0x60, 0xf3, 0x8e, 0x4c, 0xa3, 0x31, 0x91, 0x8c, 0x7b, 0x49, 0xea, 0x4f, 0xa3,
	0xc0, 0xbb, 0xa5, 0x73, 0xd5, 0x72, 0x1d, 0xa3, 0x87, 0xd8, 0x85, 0x0a, 0xbd, 0xa3, 0x73, 0xe4,
	0x42, 0xeb, 0x91, 0x21, 0xa2, 0x30, 0x26, 0x32, 0xe5, 0x54, 0xf5, 0x6c, 0x12, 0x86, 0x45, 0xc4,
	0x39, 0x81, 0x7a, 0x3f, 0x08, 0x58, 0x1a, 0xcb, 0xa1, 0x24, 0x92, 0x66, 0x63, 0x27, 0xe3, 0x31,
	0xa7, 0x42, 0x68, 0xb5, 0x0a, 0x13, 0x21, 0xa8, 0xf8, 0x53, 0xe6, 0xeb, 0xcb, 0xd5, 0xd9, 0xf9,
	0x65, 0x2d, 0x2c, 0xdd, 0x88, 0xbd, 0x62, 0xb3, 0x59, 0x24, 0x9f, 0x4a, 0x64, 0xfd, 0x99, 0x44,
	0xc7, 0xf0, 0x37, 0xc9, 0x6b, 0xf1, 0x44, 0x56, 0x8c, 0xb0, 0x4b, 0x6a, 0x5c, 0x2d, 0x4d, 0x34,
	0x0b, 0xc5, 0x1b, 0xc4, 0xb0, 0x04, 0xfa, 0xef, 0x41, 0xaf, 0xb2, 0xe2, 0xd4, 0x4d, 0xbd, 0x0a,
	0xa9, 0xd0, 0x16, 0xac, 0x85, 0x44, 0x78, 0xa9, 0xa0, 0x63, 0xa5, 0x6b, 0x05, 0x57, 0x43, 0x22,
	0x2e, 0x05, 0x1d, 0xa3, 0x7f, 0xa1, 0x3e, 0x23, 0x5f, 0xb3, 0xa9, 0x49, 0x22, 0xd3, 0x7c, 0xb3,
	0x2b, 0xb8, 0xa6, 0x7c, 0x43, 0xe5, 0x72, 0xbe, 0x97, 0xc0, 0x36, 0x8a, 0xcf, 0x96, 0xe0, 0x71,
	0x5f, 0x8f, 0x9e, 0x55, 0xfa, 0xb9, 0x9e, 0x17, 0x35, 0x7e, 0x0b, 0xad, 0xbc, 0x38, 0x6f, 0xc2,
	0xb8, 0xa7, 0x77, 0x5c, 0xe8, 0xad, 0xb6, 0x17, 0xb6, 0xee, 0x35, 0xe3, 0x57, 0x3a, 0x8e, 0x9b,
	0xf4, 0xa9, 0x0b, 0x7d, 0x86, 0xad, 0x49, 0xc4, 0x85, 0xf4, 0xcc, 0x0f, 0xa4, 0x78, 0x43, 0xf9,
	0xd6, 0xef, 0x76, 0xf3, 0x4f, 0xa4, 0x5b, 0x7c, 0x22, 0xdd, 0xcb, 0xf3, 0x58, 0x1e, 0xf5, 0xae,
	0xc8, 0x34, 0xa5, 0xb8, 0xad, 0xe8, 0x46, 0xa9, 0x3a, 0x35, 0x7a, 0x51, 0xbc, 0x9d, 0xfc, 0x2d,
	0xec, 0x2c, 0x37, 0x95, 0xcd, 0xc2, 0x7c, 0x3f, 0x83, 0xde, 0x97, 0xc3, 0x30, 0x92, 0x37, 0xa9,
	0xdf, 0x0d, 0xd8, 0xcc, 0x9d, 0x46, 0x3e, 0x27, 0xfb, 0x22, 0x0a, 0x45, 0x71, 0x1c, 0xdf, 0xee,
	0x87, 0x2c, 0x37, 0x5c, 0x9e, 0x04, 0xae, 0xca, 0xe8, 0xaf, 0xaa, 0xba, 0x5e, 0xfe, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x2a, 0x11, 0xc9, 0x4d, 0x6a, 0x05, 0x00, 0x00,
}
